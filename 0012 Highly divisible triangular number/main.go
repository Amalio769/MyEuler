// The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle
// number would be
// 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

// 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

// Let us list the factors of the first seven triangle numbers:

//  1: 1
//  3: 1,3
//  6: 1,2,3,6
// 10: 1,2,5,10
// 15: 1,3,5,15
// 21: 1,3,7,21
// 28: 1,2,4,7,14,28
// We can see that 28 is the first triangle number to have over five divisors.

// What is the value of the first triangle number to have over five hundred divisors?
// Answer:  76576500
package main

import (
	"fmt"
	"time"
)

func main() {
	start := time.Now()

	var list_triangle_number []int
	for {
		next_triangle_number := NextTriangleNumber(list_triangle_number)
		list_triangle_number = append(list_triangle_number, next_triangle_number)
		if NumberDivisors(next_triangle_number) > 500 {
			break
		}
	}

	fmt.Println(list_triangle_number[len(list_triangle_number)-1])
	fmt.Println("Computational time: ", time.Since(start))
}

func NextTriangleNumber(list_triangle_number []int) int {
	next_triangle_number := 0
	if len(list_triangle_number) == 0 {
		next_triangle_number = 1
	}
	if len(list_triangle_number) == 1 {
		next_triangle_number = 2*list_triangle_number[0] + 1
	}
	if len(list_triangle_number) > 1 {
		next_triangle_number = 2*list_triangle_number[len(list_triangle_number)-1] - list_triangle_number[len(list_triangle_number)-2] + 1
	}
	return next_triangle_number
}

func Divisors(n int) []int {
	divisors := []int{}
	// Iterate up to the square root of n
	for i := 1; i*i <= n; i++ {
		if n%i == 0 {
			divisors = append(divisors, i) // Add the divisor
			if i != n/i {
				divisors = append(divisors, n/i) // Add the paired divisor
			}
		}
	}
	return divisors
}

func NumberDivisors(n int) int {
	return len(Divisors(n))
}
